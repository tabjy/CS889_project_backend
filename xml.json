{"xml": ["<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">\t<function><type><specifier>public</specifier> <name>Void</name></type> <name>call</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>\n\t<block>{<block_content>\t\t\n\t\t<decl_stmt><decl><type><name>PointCostPair</name></type> <name>pair</name> <init>= <expr><call><name><name>optimizer</name><operator>.</operator><name>minimize</name></name><argument_list>(\n\t\t        <argument><expr><name>costFunction</name></expr></argument>, \n\t\t        <argument><expr><name>maxEvaluations</name></expr></argument>, \n\t\t        <argument><expr><name>checker</name></expr></argument>, \n\t\t        <argument><expr><name>vertexA</name></expr></argument>,\n\t\t        <argument><expr><name>vertexB</name></expr></argument>\n\t\t    )</argument_list></call></expr></init></decl>;</decl_stmt>\n\t\t<expr_stmt><expr><call><name><name>queueInX</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n\t\t<expr_stmt><expr><name>terminated</name> <operator>=</operator> <literal type=\"boolean\">true</literal></expr>;</expr_stmt>\n\t\t<comment type=\"line\">// it is the same condition used to say that new x values are available, but now they</comment>\n\t\t<comment type=\"line\">// are null.</comment>\n\t\t<return>return <expr><operator>(</operator><name>Void</name><operator>)</operator><literal type=\"null\">null</literal></expr>;</return>\n\t</block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>public</specifier> <name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>Display</name></type> <name>display</name></decl></parameter>, <parameter><decl><type><name>MessageView</name></type> <name>messageView</name></decl></parameter>)</parameter_list>\n    <block>{<block_content>     \n    \t<expr_stmt><expr><name><name>this</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>\n    \t<expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageView</name></name> <operator>=</operator> <name>messageView</name></expr>;</expr_stmt>    \t\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>private</specifier> <name>void</name></type> <name>setColumnsWidth</name><parameter_list>()</parameter_list>\n    <block>{<block_content>        \t\n    \t<decl_stmt><decl><type><name>int</name></type> <name>sampleLen</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>calcSampleCellSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>\n    \t<decl_stmt><decl><type><name>int</name></type> <name>charSizeX</name> <init>= <expr><call><name><name>SWTUtils</name><operator>.</operator><name>getFontSizeInPixel</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>.</operator><name>x</name> <operator>*</operator> <operator>(</operator><name>sampleLen</name> <operator>+</operator> <literal type=\"number\">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>\n    \t<for>for<control>(<init><decl><type><name>TableColumn</name></type> <name>col</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type=\"pseudo\"><block_content>\n    \t\t<expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>setWidth</name></name><argument_list>(<argument><expr><name>charSizeX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>        \t\t        \t\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">\t<function><type><specifier>private</specifier> <name>void</name></type> <name>recalculateColumnAndRowCount</name><parameter_list>()</parameter_list>\n\t<block>{<block_content>\t\t\n\t\t<expr_stmt><expr><name>columnCount</name> <operator>=</operator> <literal type=\"number\">0</literal></expr>;</expr_stmt>\n\t\t<expr_stmt><expr><name>rowCount</name> <operator>=</operator> <literal type=\"number\">0</literal></expr>;</expr_stmt>\n\t\t<for>for<control>(<init><decl><type><name>PresentedData</name></type> <name>data</name> <range>: <expr><call><name><name>mapDataById</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type=\"pseudo\"><block_content>\n\t\t\t<expr_stmt><expr><call><name>changeColumnAndRowCountForData</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>\n\t</block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>private</specifier> <name>void</name></type> <name>setRows</name><parameter_list>(<parameter><decl><type><name><name>InputMatrixInfo</name><index>[]</index></name></type> <name>arrMatrixInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>\n    <block>{<block_content>    \n        <for>for<control>(<init><decl><type><name>int</name></type> <name>I</name> <init>= <expr><literal type=\"number\">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control>\n        <block>{<block_content>\n            <decl_stmt><decl><type><name>MatrixInfo</name></type> <name>info</name> <init>= <expr><call><name>getMatrixInfoForRow</name><argument_list>(<argument><expr><name>arrMatrixInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n            <decl_stmt><decl><type><name>TableItem</name></type> <name>row</name> <init>= <expr><operator>new</operator> <call><name>TableItem</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type=\"number\">0</literal></expr></argument>, <argument><expr><call><name><name>info</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n            <comment type=\"line\">// row.setText(1, info.getInfo());</comment>\n            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type=\"number\">1</literal></expr></argument>, <argument><expr><call><name><name>info</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n        </block_content>}</block></for>                \n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>private</specifier> <name>void</name></type> <name>setRows</name><parameter_list>()</parameter_list>\n    <block>{<block_content>    \n        <for>for<control>(<init><decl><type><name>int</name></type> <name>I</name> <init>= <expr><literal type=\"number\">0</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>I</name><operator>++</operator></expr></incr>)</control>\n        <block>{<block_content>\n            <decl_stmt><decl><type><name>OutputMatrixInfo</name></type> <name>info</name> <init>= <expr><call><name>getMatrixInfoForRow</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n            <decl_stmt><decl><type><name>TableItem</name></type> <name>row</name> <init>= <expr><operator>new</operator> <call><name>TableItem</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type=\"number\">0</literal></expr></argument>, <argument><expr><call><name><name>info</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n            <comment type=\"line\">// row.setText(1, info.getInfo());            </comment>\n            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type=\"number\">1</literal></expr></argument>, <argument><expr><call><name><name>info</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type=\"number\">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>info</name><operator>.</operator><name>isCallback</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type=\"string\">\"Yes\"</literal></expr> </then><else>: <expr><literal type=\"string\">\"\"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n        </block_content>}</block></for>                \n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>private</specifier> <name>TreeItem</name></type> <name>findNodeWithIdRecursive</name><parameter_list>(<parameter><decl><type><name><name>TreeItem</name><index>[]</index></name></type> <name>arrItem</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list>\n    <block>{<block_content>    \t\n        <for>for<control>(<init><decl><type><name>TreeItem</name></type> <name>current</name><range>: <expr><name>arrItem</name></expr></range></decl></init>)</control>\n        <block>{<block_content>\n        \t<decl_stmt><decl><type><name>String</name></type> <name>idInNode</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>current</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> \n            <if_stmt><if>if<condition>(<expr><call><name><name>idInNode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type=\"pseudo\"><block_content>\n                <return>return <expr><name>current</name></expr>;</return></block_content></block></if></if_stmt>\n            <decl_stmt><decl><type><name>TreeItem</name></type> <name>itemInside</name> <init>= <expr><call><name>findNodeWithIdRecursive</name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getItems</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n            <if_stmt><if>if<condition>(<expr><name>itemInside</name> <operator>!=</operator> <literal type=\"null\">null</literal></expr>)</condition><block type=\"pseudo\"><block_content>\n            \t<return>return <expr><name>itemInside</name></expr>;</return></block_content></block></if></if_stmt>            \t\n        </block_content>}</block></for>\n        <return>return <expr><literal type=\"null\">null</literal></expr>;</return>\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>\n    <block>{<block_content>        \n        <try>try\n\t\t<block>{<block_content>\n\t\t\t<decl_stmt><decl><type><name><name>List</name><argument_list type=\"generic\">&lt;<argument><name>IRItem</name></argument>&gt;</argument_list></name></type> <name>lstTimer</name> <init>= <expr><call><name><name>tree</name><operator>.</operator><name>getSelectedItems</name></name><argument_list>(<argument><expr><literal type=\"boolean\">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n\t\t\t<if_stmt><if>if<condition>(<expr><name>lstTimer</name> <operator>==</operator> <literal type=\"null\">null</literal></expr>)</condition><block type=\"pseudo\"><block_content>\n\t\t\t\t<return>return;</return></block_content></block></if></if_stmt>\n\t\t\t<decl_stmt><decl><type><name>String</name></type> <name>seqTimer</name> <init>= <expr><call><name><name>NamePackageUtils</name><operator>.</operator><name>buildNamePackageSequence</name></name><argument_list>(<argument><expr><name>lstTimer</name></expr></argument>, <argument><expr><name>\u00e2\u0080\u0098</name><operator>\\</operator><name>n\u00e2\u0080\u0099</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>NamePackageUtils</name><operator>.</operator><name>ItemToSimpleText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n\t\t\t<if_stmt><if>if<condition>(<expr><call><name><name>MessageBoxHandler</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name><name>SWT</name><operator>.</operator><name>ICON_QUESTION</name></name><operator>|</operator><name><name>SWT</name><operator>.</operator><name>YES</name></name><operator>|</operator><name><name>SWT</name><operator>.</operator><name>NO</name></name></expr></argument>, <argument><expr><literal type=\"string\">\"Remove timer\"</literal></expr></argument>, \n\t\t\t\t\t<argument><expr><literal type=\"string\">\"Are you sure to remove the timers \"</literal><operator>+</operator><name>seqTimer</name><operator>+</operator><literal type=\"string\">\"?\"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>SWT</name><operator>.</operator><name>NO</name></name></expr>)</condition><block type=\"pseudo\"><block_content>\n\t\t\t    <return>return;</return></block_content></block></if></if_stmt>\n\t\t\t<for>for<control>(<init><decl><type><name>IRItem</name></type> <name>timer</name> <range>: <expr><name>lstTimer</name></expr></range></decl></init>)</control><block type=\"pseudo\"><block_content>\n\t\t\t\t<expr_stmt><expr><call><name>removeTimerWithDependencies</name><argument_list>(<argument><expr><operator>(</operator><name>IRTimer</name><operator>)</operator><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>\n\t\t</block_content>}</block>\n\t\t<catch>catch <parameter_list>(<parameter><decl><type><name>TreeException</name></type> <name>ex</name></decl></parameter>)</parameter_list>\n\t\t<block>{<block_content>\n\t\t\t<expr_stmt><expr><call><name><name>MessageBoxAndLog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><literal type=\"string\">\"Remove timer\"</literal></expr></argument>, <argument><expr><literal type=\"string\">\"Removing the timers got\"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\t\t\t\n\t\t</block_content>}</block></catch></try>        \n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTime</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>ts</name></decl></parameter>)</parameter_list>\n    <block>{<block_content>    \t\n    \t<expr_stmt><expr><call><name><name>spHour</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>getHourOfDay</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n    \t<expr_stmt><expr><call><name><name>spMinute</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>getMinuteOfHour</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n    \t<expr_stmt><expr><call><name><name>spSecond</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>getSecondOfMinute</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>private</specifier> <name>Image</name></type> <name>mapImage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list>\n    <block>{<block_content>    \t\n    \t<for>for<control>(<init><decl><type><name>String</name></type> <name>suffix</name> <range>:  <expr><name>arrSuffix</name></expr></range></decl></init>)</control>\n    \t<block>{<block_content>\n\t    \t<try>try\n\t    \t<block>{<block_content>\n\t    \t\t<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>loadImage</name><argument_list>(<argument><expr><name>id</name><operator>+</operator><literal type=\"string\">\".\"</literal><operator>+</operator><name>suffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n\t        \t<expr_stmt><expr><call><name><name>mapImageByName</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n\t    \t    <return>return <expr><name>image</name></expr>;</return>\t     \n\t    \t</block_content>}</block>\n\t    \t<catch>catch<parameter_list>(<parameter><decl><type><name>SWTException</name></type> <name>e</name></decl></parameter>)</parameter_list>\n\t    \t<block>{<block_content>\n\t    \t\t<comment type=\"line\">// Nothing to catch</comment>\n\t    \t</block_content>}</block></catch></try>\n    \t</block_content>}</block></for>\n    \t<throw>throw <expr><operator>new</operator> <call><name>SWTException</name><argument_list>(<argument><expr><literal type=\"string\">\"Unable to load image \"</literal><operator>+</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</throw>\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">        \t<function><annotation>@<name>Override</name></annotation>  <type><specifier>public</specifier> <name>void</name></type> <name>widgetDefaultSelected</name><parameter_list>(<parameter><decl><type><name>SelectionEvent</name></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{<block_content>\n                <decl_stmt><decl><type><name>TreeItem</name></type> <name>selection</name> <init>= <expr><operator>(</operator><name>TreeItem</name><operator>)</operator> <name><name>ev</name><operator>.</operator><name>item</name></name></expr></init></decl>;</decl_stmt>\n                <if_stmt><if>if<condition>(<expr><name>selection</name> <operator>!=</operator> <literal type=\"null\">null</literal></expr>)</condition>\n                <block>{<block_content>\n\t                <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>setExpanded</name></name><argument_list>(<argument><expr><literal type=\"boolean\">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n\t                <decl_stmt><decl><type><name>IRItem</name></type> <name>item</name> <init>= <expr><operator>(</operator><name>IRItem</name><operator>)</operator> <call><name><name>ev</name><operator>.</operator><name>item</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>\n\t                <expr_stmt><expr><call><name>notifyDoubleClicked</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n                </block_content>}</block></if></if_stmt>\n            </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSelectedPackage</name><parameter_list>()</parameter_list>\n    <block>{<block_content>      \n        <decl_stmt><decl><type><name><name>TreeItem</name><index>[]</index></name></type> <name>arrSelected</name> <init>= <expr><call><name><name>tree</name><operator>.</operator><name>getSelection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>\n        <if_stmt><if>if<condition>(<expr><name>arrSelected</name> <operator>!=</operator> <literal type=\"null\">null</literal> <operator>&amp;&amp;</operator> <name><name>arrSelected</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type=\"number\">0</literal></expr>)</condition>\n        <block>{<block_content>\n            <decl_stmt><decl><type><name>TreeItem</name></type> <name>selected</name> <init>= <expr><name><name>arrSelected</name><index>[<expr><literal type=\"number\">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>\n            <comment type=\"line\">// if the selected node is a leaf (a matrex item), not a package, gets its package  </comment>\n            <if_stmt><if>if<condition>(<expr><call><name><name>selected</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type=\"number\">0</literal></expr>)</condition><block type=\"pseudo\"><block_content>\n                <expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name><name>selected</name><operator>.</operator><name>getParentItem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>\n            <if_stmt><if>if<condition>(<expr><name>selected</name> <operator>!=</operator> <literal type=\"null\">null</literal></expr>)</condition>\n            <block>{<block_content>\n                <decl_stmt><decl><type><name>String</name></type> <name>selectedPackage</name> <init>= <expr><call><name><name>selected</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>\n                <expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name><name>selected</name><operator>.</operator><name>getParentItem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>\n                <while>while<condition>(<expr><name>selected</name> <operator>!=</operator> <literal type=\"null\">null</literal></expr>)</condition>\n                <block>{<block_content>\n                    <expr_stmt><expr><name>selectedPackage</name> <operator>=</operator> <call><name><name>selected</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type=\"string\">\".\"</literal> <operator>+</operator> <name>selectedPackage</name></expr>;</expr_stmt>\n                    <expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name><name>selected</name><operator>.</operator><name>getParentItem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>\n                </block_content>}</block></while>\n                <return>return <expr><name>selectedPackage</name></expr>;</return>\n            </block_content>}</block></if></if_stmt>\n        </block_content>}</block></if></if_stmt>\n        <return>return <expr><literal type=\"string\">\"\"</literal></expr>;</return>        \n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">\t<function><type><specifier>public</specifier> <name>void</name></type> <name>selectItem</name><parameter_list>(<parameter><decl><type><name>NameAndPackage</name></type> <name>namePackage</name></decl></parameter>)</parameter_list>\n\t<block>{<block_content>\t\t\n\t\t<try>try\n\t\t<block>{<block_content>\n\t\t\t<decl_stmt><decl><type><name>TreeItem</name></type> <name>item</name> <init>= <expr><call><name>findTreeItem</name><argument_list>(<argument><expr><name>namePackage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n\t\t\t<if_stmt><if>if<condition>(<expr><name>item</name> <operator>!=</operator> <literal type=\"null\">null</literal></expr>)</condition>\n\t\t\t<block>{<block_content>\n\t\t\t\t<expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>TreeItem</name><index>[]</index></name> <block>{ <expr><name>item</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n\t\t\t\t<expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>showSelection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>\n\t\t\t\t<expr_stmt><expr><call><name>notifySelected</name><argument_list>(<argument><expr><operator>(</operator><name>IRItem</name><operator>)</operator> <call><name><name>item</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n\t\t\t</block_content>}</block></if></if_stmt>\n\t\t</block_content>}</block>\n\t\t<catch>catch <parameter_list>(<parameter><decl><type><name>TreeException</name></type> <name>e</name></decl></parameter>)</parameter_list>\n\t\t<block>{<block_content>\n\t\t\t<expr_stmt><expr><call><name><name>MessageBoxAndLog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>tree</name><operator>.</operator><name>getShell</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type=\"string\">\"Project\"</literal></expr></argument>, <argument><expr><literal type=\"string\">\"Selecting the item \"</literal><operator>+</operator><name>namePackage</name><operator>+</operator><literal type=\"string\">\" in the tree got\"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n        </block_content>}</block></catch></try>        \n\t</block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>public</specifier> <name>IFunction</name></type> <name>buildFunction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>FunctionBuildingException</name></expr></argument></throws>\n    <block>{<block_content>        \n        <try>try\n        <block>{<block_content>\n            <decl_stmt><decl><type><name>IFunction</name></type> <name>function</name> <init>= <expr><operator>(</operator><name>IFunction</name><operator>)</operator><call><name><name>functionClass</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>\n            <return>return <expr><name>function</name></expr>;</return>\n        </block_content>}</block>\n        <catch>catch <parameter_list>(<parameter><decl><type><name>InstantiationException</name></type> <name>e</name></decl></parameter>)</parameter_list>\n        <block>{<block_content>\n            <throw>throw <expr><operator>new</operator> <call><name>FunctionBuildingException</name><argument_list>(<argument><expr><literal type=\"string\">\"Building the function with class \"</literal><operator>+</operator><name>functionClass</name><operator>+</operator><literal type=\"string\">\" got\"</literal></expr></argument>,  <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>\n        </block_content>}</block></catch>\n        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>\n        <block>{<block_content>\n            <throw>throw <expr><operator>new</operator> <call><name>FunctionBuildingException</name><argument_list>(<argument><expr><literal type=\"string\">\"Building the function with class \"</literal><operator>+</operator><name>functionClass</name><operator>+</operator><literal type=\"string\">\" got\"</literal></expr></argument>,  <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>\n        </block_content>}</block></catch></try>\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>private</specifier> <name>void</name></type> <name>initDownloadLimits</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type=\"generic\">&lt;<argument><name>String</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>,<parameter><decl><type><name>FacetField</name></type> <name>facet</name></decl></parameter>)</parameter_list><block>{<block_content>\n        <comment type=\"line\">//get the download limits from the cache</comment>\n        <decl_stmt><decl><type><name><name>Map</name><argument_list type=\"generic\">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type><name>limits</name> <init>= <expr><call><name><name>collectionCache</name><operator>.</operator><name>getDownloadLimits</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>\n        <for>for<control>(<init><decl><type><name><name>FacetField</name><operator>.</operator><name>Count</name></name></type> <name>facetEntry</name> <range>:<expr><call><name><name>facet</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{<block_content>\n            <decl_stmt><decl><type><name>Integer</name></type> <name>limit</name> <init>= <expr><call><name><name>limits</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>facetEntry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>\n            <if_stmt><if>if<condition>(<expr><name>limit</name> <operator>!=</operator> <literal type=\"null\">null</literal> <operator>&amp;&amp;</operator> <name>limit</name> <operator>&gt;</operator><literal type=\"number\">0</literal></expr>)</condition><block>{<block_content>\n                <comment type=\"line\">//check to see if the number of records returned from the query execeeds the limit</comment>\n                <if_stmt><if>if<condition>(<expr><name>limit</name> <operator>&lt;</operator> <call><name><name>facetEntry</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>)</condition><block type=\"pseudo\"><block_content>\n                    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>facetEntry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>\n            </block_content>}</block></if></if_stmt>\n        </block_content>}</block></for>\n        <if_stmt><if>if<condition>(<expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type=\"number\">0</literal></expr>)</condition><block type=\"pseudo\"><block_content>\n            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type=\"string\">\"Downloading with the following limits: \"</literal> <operator>+</operator> <name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>protected</specifier> <name>String</name></type> <name>buildSpatialQueryString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fullTextQuery</name></decl></parameter>, <parameter><decl><type><name>Float</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>Float</name></type> <name>longitude</name></decl></parameter>, <parameter><decl><type><name>Float</name></type> <name>radius</name></decl></parameter>)</parameter_list> <block>{<block_content>\n        <decl_stmt><decl><type><name>String</name></type> <name>queryString</name> <init>= <expr><literal type=\"string\">\"{!spatial circles=\"</literal> <operator>+</operator> <call><name><name>latitude</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type=\"string\">\",\"</literal> <operator>+</operator> <call><name><name>longitude</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call>\n                <operator>+</operator> <literal type=\"string\">\",\"</literal> <operator>+</operator> <call><name><name>radius</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type=\"string\">\"}\"</literal> <operator>+</operator>  <name>fullTextQuery</name></expr></init></decl>;</decl_stmt>\n        <return>return <expr><name>queryString</name></expr>;</return>\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>private</specifier> <name>String</name></type> <name>prepareSolrStringForReplacement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list><block>{<block_content>\n        <comment type=\"line\">//if starts and ends with quotes just escape the inside       </comment>\n        <decl_stmt><decl><type><name>boolean</name></type> <name>quoted</name> <init>= <expr><literal type=\"boolean\">false</literal></expr></init></decl>;</decl_stmt>\n        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>\n        <if_stmt><if>if<condition>(<expr><call><name><name>value</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type=\"string\">\"\\\"\"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>value</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type=\"string\">\"\\\"\"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>\n            <expr_stmt><expr><name>quoted</name> <operator>=</operator> <literal type=\"boolean\">true</literal></expr>;</expr_stmt>\n            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type=\"number\">1</literal></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type=\"number\">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type=\"string\">\"\\\"\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n        </block_content>}</block></if></if_stmt>\n        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>ClientUtils</name><operator>.</operator><name>escapeQueryChars</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type=\"string\">\"\\\\\\\\\"</literal></expr></argument>, <argument><expr><literal type=\"string\">\"\\\\\\\\\\\\\\\\\"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n        <if_stmt><if>if<condition>(<expr><name>quoted</name></expr>)</condition><block type=\"pseudo\"><block_content> <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type=\"string\">\"\\\"\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>        \n        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>protected</specifier> <name>void</name></type> <name>updateQueryContext</name><parameter_list>(<parameter><decl><type><name>SearchRequestParams</name></type> <name>searchParams</name></decl></parameter>)</parameter_list><block>{<block_content>\n        <comment type=\"line\">//TODO better method of getting the mappings between qc on solr fields names</comment>\n        <decl_stmt><decl><type><name>String</name></type> <name>qc</name> <init>= <expr><call><name><name>searchParams</name><operator>.</operator><name>getQc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>\n        <if_stmt><if>if<condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNotEmpty</name></name><argument_list>(<argument><expr><name>qc</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>\n<comment type=\"line\">//            String[] values = qc.split(\",\");</comment>\n<comment type=\"line\">//            for(int I =0; I&lt;values.length;i++){</comment>\n<comment type=\"line\">//                String field = values[I];</comment>\n<comment type=\"line\">//                values[I]= field.replace(\"hub:\", \"data_hub_uid:\");</comment>\n<comment type=\"line\">//</comment>\n<comment type=\"line\">//            }</comment>\n            \n            <comment type=\"line\">//add the query context to the filter query</comment>\n            <expr_stmt><expr><call><name><name>searchParams</name><operator>.</operator><name>setFq</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>String</name><index>[]</index></name><operator>)</operator><call><name><name>ArrayUtils</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>searchParams</name><operator>.</operator><name>getFq</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getQueryContextAsArray</name><argument_list>(<argument><expr><name>qc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>\n        </block_content>}</block></if></if_stmt>\n    </block_content>}</block></function>\n</unit>\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<unit xmlns=\"http://www.srcML.org/srcML/src\" revision=\"1.0.0\" language=\"Java\" filename=\"1.java\">    <function><type><specifier>public</specifier> <name>String</name></type> <name>getQ</name><parameter_list>()</parameter_list> <block>{<block_content>\n        <return>return <expr><name>q</name></expr>;</return>\n    </block_content>}</block></function>\n</unit>\n"], "code": ["\tpublic Void call() throws Exception\n\t{\t\t\n\t\tPointCostPair pair = optimizer.minimize(\n\t\t        costFunction, \n\t\t        maxEvaluations, \n\t\t        checker, \n\t\t        vertexA,\n\t\t        vertexB\n\t\t    );\n\t\tqueueInX.add(pair.getPoint());\n\t\tterminated = true;\n\t\t// it is the same condition used to say that new x values are available, but now they\n\t\t// are null.\n\t\treturn (Void)null;\n\t}\n", "    public void initialize(Display display, MessageView messageView)\n    {     \n    \tthis.display = display;\n    \tthis.messageView = messageView;    \t\n    }\n", "    private void setColumnsWidth()\n    {        \t\n    \tint sampleLen = cache.calcSampleCellSize();\n    \tint charSizeX = SWTUtils.getFontSizeInPixel(table).x * (sampleLen + 2);\n    \tfor(TableColumn col : table.getColumns())\n    \t\tcol.setWidth(charSizeX);        \t\t        \t\n    }\n", "\tprivate void recalculateColumnAndRowCount()\n\t{\t\t\n\t\tcolumnCount = 0;\n\t\trowCount = 0;\n\t\tfor(PresentedData data : mapDataById.values())\n\t\t\tchangeColumnAndRowCountForData(data);\n\t}\n", "    private void setRows(InputMatrixInfo[] arrMatrixInfo, int max)\n    {    \n        for(int I = 0; I < max; I++)\n        {\n            MatrixInfo info = getMatrixInfoForRow(arrMatrixInfo, i);\n            TableItem row = new TableItem(table, SWT.NULL);\n            row.setText(0, info.getName());\n            // row.setText(1, info.getInfo());\n            row.setText(1, info.getType().toString());\n        }                \n    }\n", "    private void setRows()\n    {    \n        for(int I = 0; I < max; I++)\n        {\n            OutputMatrixInfo info = getMatrixInfoForRow(i);\n            TableItem row = new TableItem(table, SWT.NULL);\n            row.setText(0, info.getName());\n            // row.setText(1, info.getInfo());            \n            row.setText(1, info.getType().toString());\n            row.setText(2, info.isCallback() ? \"Yes\" : \"\");\n        }                \n    }\n", "    private TreeItem findNodeWithIdRecursive(TreeItem[] arrItem, String id)\n    {    \t\n        for(TreeItem current: arrItem)\n        {\n        \tString idInNode = (String) current.getData(); \n            if(idInNode.equals(id))\n                return current;\n            TreeItem itemInside = findNodeWithIdRecursive(current.getItems(), id);\n            if(itemInside != null)\n            \treturn itemInside;            \t\n        }\n        return null;\n    }\n", "    public void remove()\n    {        \n        try\n\t\t{\n\t\t\tList<IRItem> lstTimer = tree.getSelectedItems(true);\n\t\t\tif(lstTimer == null)\n\t\t\t\treturn;\n\t\t\tString seqTimer = NamePackageUtils.buildNamePackageSequence(lstTimer, \u2018\\n\u2019, new NamePackageUtils.ItemToSimpleText());\n\t\t\tif(MessageBoxHandler.show(shell, SWT.ICON_QUESTION|SWT.YES|SWT.NO, \"Remove timer\", \n\t\t\t\t\t\"Are you sure to remove the timers \"+seqTimer+\"?\") == SWT.NO)\n\t\t\t    return;\n\t\t\tfor(IRItem timer : lstTimer)\n\t\t\t\tremoveTimerWithDependencies((IRTimer)timer);\n\t\t}\n\t\tcatch (TreeException ex)\n\t\t{\n\t\t\tMessageBoxAndLog.show(shell, \"Remove timer\", \"Removing the timers got\", ex);\t\t\t\n\t\t}        \n    }\n", "    public void setTime(DateTime ts)\n    {    \t\n    \tspHour.setSelection(ts.getHourOfDay());\n    \tspMinute.setSelection(ts.getMinuteOfHour());\n    \tspSecond.setSelection(ts.getSecondOfMinute());\n    }\n", "    private Image mapImage(String id)\n    {    \t\n    \tfor(String suffix :  arrSuffix)\n    \t{\n\t    \ttry\n\t    \t{\n\t    \t\tImage image = loadImage(id+\".\"+suffix);\n\t        \tmapImageByName.put(id, image);\n\t    \t    return image;\t     \n\t    \t}\n\t    \tcatch(SWTException e)\n\t    \t{\n\t    \t\t// Nothing to catch\n\t    \t}\n    \t}\n    \tthrow new SWTException(\"Unable to load image \"+id);\n    }\n", "        \t@Override  public void widgetDefaultSelected(SelectionEvent ev) {\n                TreeItem selection = (TreeItem) ev.item;\n                if(selection != null)\n                {\n\t                selection.setExpanded(true);\n\t                IRItem item = (IRItem) ev.item.getData();\n\t                notifyDoubleClicked(item);\n                }\n            }\n", "    public String getSelectedPackage()\n    {      \n        TreeItem[] arrSelected = tree.getSelection();\n        if(arrSelected != null && arrSelected.length > 0)\n        {\n            TreeItem selected = arrSelected[0];\n            // if the selected node is a leaf (a matrex item), not a package, gets its package  \n            if(selected.getItemCount() == 0)\n                selected = selected.getParentItem();\n            if(selected != null)\n            {\n                String selectedPackage = selected.getText();\n                selected = selected.getParentItem();\n                while(selected != null)\n                {\n                    selectedPackage = selected.getText() + \".\" + selectedPackage;\n                    selected = selected.getParentItem();\n                }\n                return selectedPackage;\n            }\n        }\n        return \"\";        \n    }\n", "\tpublic void selectItem(NameAndPackage namePackage)\n\t{\t\t\n\t\ttry\n\t\t{\n\t\t\tTreeItem item = findTreeItem(namePackage);\n\t\t\tif(item != null)\n\t\t\t{\n\t\t\t\ttree.setSelection(new TreeItem[] { item });\n\t\t\t\ttree.showSelection();\n\t\t\t\tnotifySelected((IRItem) item.getData());\n\t\t\t}\n\t\t}\n\t\tcatch (TreeException e)\n\t\t{\n\t\t\tMessageBoxAndLog.show(tree.getShell(), \"Project\", \"Selecting the item \"+namePackage+\" in the tree got\", e);\n        }        \n\t}\n", "    public IFunction buildFunction() throws FunctionBuildingException\n    {        \n        try\n        {\n            IFunction function = (IFunction)functionClass.newInstance();\n            return function;\n        }\n        catch (InstantiationException e)\n        {\n            throw new FunctionBuildingException(\"Building the function with class \"+functionClass+\" got\",  e);\n        }\n        catch (IllegalAccessException e)\n        {\n            throw new FunctionBuildingException(\"Building the function with class \"+functionClass+\" got\",  e);\n        }\n    }\n", "    private void initDownloadLimits(Map<String,Integer> map,FacetField facet){\n        //get the download limits from the cache\n        Map<String, Integer>limits = collectionCache.getDownloadLimits();\n        for(FacetField.Count facetEntry :facet.getValues()){\n            Integer limit = limits.get(facetEntry.getName());\n            if(limit != null && limit >0){\n                //check to see if the number of records returned from the query execeeds the limit\n                if(limit < facetEntry.getCount())\n                    map.put(facetEntry.getName(), limit);\n            }\n        }\n        if(map.size()>0)\n            logger.debug(\"Downloading with the following limits: \" + map);\n    }\n", "    protected String buildSpatialQueryString(String fullTextQuery, Float latitude, Float longitude, Float radius) {\n        String queryString = \"{!spatial circles=\" + latitude.toString() + \",\" + longitude.toString()\n                + \",\" + radius.toString() + \"}\" +  fullTextQuery;\n        return queryString;\n    }\n", "    private String prepareSolrStringForReplacement(String value){\n        //if starts and ends with quotes just escape the inside       \n        boolean quoted = false;\n        StringBuffer sb = new StringBuffer();\n        if(value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n            quoted = true;\n            value = value.substring(1, value.length()-1);\n            sb.append(\"\\\"\");\n        }\n        sb.append(ClientUtils.escapeQueryChars(value).replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"));\n        if(quoted) sb.append(\"\\\"\");        \n        return sb.toString();\n    }\n", "    protected void updateQueryContext(SearchRequestParams searchParams){\n        //TODO better method of getting the mappings between qc on solr fields names\n        String qc = searchParams.getQc();\n        if(StringUtils.isNotEmpty(qc)){\n//            String[] values = qc.split(\",\");\n//            for(int I =0; I<values.length;i++){\n//                String field = values[I];\n//                values[I]= field.replace(\"hub:\", \"data_hub_uid:\");\n//\n//            }\n            \n            //add the query context to the filter query\n            searchParams.setFq((String[])ArrayUtils.addAll(searchParams.getFq(), getQueryContextAsArray(qc)));\n        }\n    }\n", "    public String getQ() {\n        return q;\n    }\n"]}